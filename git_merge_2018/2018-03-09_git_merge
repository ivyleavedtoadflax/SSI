# Some takeaways from git merge 2018

This March I was lucky enough to get a ticket for the annual git conference in Barcelona. With it being just 20 minutes from home, it was not something I could miss, especially after being offered a ticket by Raniere, who sadly could not make it.

First of all it is worth saying a congratulatiosn (and thank you) to all the organisers and sponsers of git merge from: github, gitlab, bitbucket, microsoft, and stickermule. It was a slick and well organised event that went without hitch, served excellent food, and took place in the impressive MACBA conference centre, and __16th__ century convent in the heart of Barcelona, just __5__ minutes walk from the city's political centre.

One of the interesting things about going to a conference about all things git, is that there is a huge range of people who attend. To many (perhaps most) software developer`s, git is an essential paty of their daily work: so the range of people who might attend is really very wide. Aside from software developers who use and are interested in git, there were two other distinct grooups of people I noted: those who are not yet git users (or have just become git users) and wanted to learn more about using git, perhaps at workshops; and those with very deep expertise in git, were perhaps core developers at github, gitlab, or bitbucket, or even the git kernel itself. It was a truly international event: I spoke to delegates from Spain, Belgium, Switzerland, Canada, USA, UK, Germany, South Africa

These were my highlights from the conference:

[Brett Smith]() from the [Software Freedom Conservancy]() opened proceedings with an amusing portrayal of what was (for him) the start of thinking about sharing code and the values that many git users hold dear: the 1990s DOS game [ZZT](https://en.wikipedia.org/wiki/ZZT).

[Diane Hosfelt]() from [Mozilla]() presented about the importance of putting security critical code in plain sight, and managing it with a sensible workflow. Diane, like myself a self confessed recovering civil servant, noted the change in culture that moving to Mozilla and working openly on security critical browser components was to her. Working in government (and indeed any security conscious large organisation) there is sometimes a reluctance to share work within the organisation, let alone without. This cultural barrier to openess is sometimes motivated by nothing more than fear that others might criticise our code, but as Diane pointed out when she asked: 'How many of you have tried to read the source code of OpenSSL' (not very many at all it seemed): just because your code is in the open, doesn't mean anyone is actually going to read it. Nonetheless publishing openly and managing code with the familiar Issue>Fork>Pull Request>Review>Rebase>Test>Merge workflow is doubly important when it really matters for security critical code.

[Carlos Martin Nieto]() from [GitHub]() gave an interesting breakdown of the tech behind GitHub backups. tldr; your data is safe with GitHub, and moving from a system of storing data in volumes (on [AWS EC2]()) to storing data as objects (on [AWS S3]()) led to 90% savings in the backup costs. Key takeaways for me: if you need to rely on a piece of software, make sure you are using it every day; GitHub makes thousands of backup and restores every day on bespoke software.

[Edward Thomson]() from [Microsoft]() and the maintainer of [libgit2]() ,the library which sits behind git integration in many git clients, gave a slick demonstration of a security vulnerability which caused him many sleepless nights, exploiting case insensitivity on mac and windows systems, and allowing an attacker to execute malicious code using git hooks. Edward highlighted the importance of community, which allowed Mercurial (responsible for SVN - which also suffered from the issue), git, libgit2, and GitHub all managed to coordinate patch release to deal with thus vulnerability, and the subsequent creation of the git security mailing list to allow better communication going forward.

A highlight for me was[Empowering non-develops to use git]() by [William Chia]() from [GitLab](). GitLab loves git, so much so that it is used by pretty much everyone in the company for pretty much everything.

Marketing managers, graphic designers, lawyers, and sales professionals work in markdown using static site generators (like jekyll, or hugo) for their daily work, allowing true and easy collaboration between colleagues that scales easily.

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">There&#39;s an issue for everything at gitlab, not just source code. Interesting talk by <a href="https://twitter.com/TheWilliamChia?ref_src=twsrc%5Etfw">@TheWilliamChia</a> <a href="https://twitter.com/gitlab?ref_src=twsrc%5Etfw">@gitlab</a> <a href="https://twitter.com/hashtag/gitmerge?src=hash&amp;ref_src=twsrc%5Etfw">#gitmerge</a> <a href="https://twitter.com/hashtag/Barcelona?src=hash&amp;ref_src=twsrc%5Etfw">#Barcelona</a> <a href="https://t.co/6vuJ7sV7yJ">pic.twitter.com/6vuJ7sV7yJ</a></p>&mdash; Matt Upson (@m_a_upson) <a href="https://twitter.com/m_a_upson/status/971726460586209280?ref_src=twsrc%5Etfw">March 8, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

What I love about this approach is that once the cultural barrier to working with something that looks a bit like code has been overcome, the issue of who did what when, and why and how to transmit knowledge within the organisation is at least partially solved. This is a huge issue that many large organisations struggle with, and an approach that is lightweight, easy, and cheap that many other organisation could learn from. Bravo GitLab. Also a peak behind the GitLab curtain: coming this month from GitLab is CI/CD for GitHub repos (this is already supported for native GitLab repos).

Another highlight for me was a presentation on 'Git driven refactoring' by [Ashley Ellis Pearce]() from [GitHub](). This was a thought provoking presentation and engaging presentation which demonstrated simple but elegant ways for testing adherence to the [SOLID](https://en.wikipedia.org/wiki/SOLID_(object-oriented_design) principles using your commits. For example: 'When adding features there should be no red in the diffs' as a way of testing the [Open/closed principle](https://en.wikipedia.org/wiki/Open/closed_principle): essentially if there is red (and you needed to delete something) to add a new feature, then something may have gone awry.

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Great point by <a href="https://twitter.com/aellispierce?ref_src=twsrc%5Etfw">@aellispierce</a> at <a href="https://twitter.com/hashtag/gitmerge?src=hash&amp;ref_src=twsrc%5Etfw">#gitmerge</a> <a href="https://twitter.com/hashtag/barcelona?src=hash&amp;ref_src=twsrc%5Etfw">#barcelona</a> 2018 <a href="https://twitter.com/SoftwareSaved?ref_src=twsrc%5Etfw">@SoftwareSaved</a> <a href="https://twitter.com/mammykins_?ref_src=twsrc%5Etfw">@mammykins_</a> <a href="https://t.co/7ImOousNLo">pic.twitter.com/7ImOousNLo</a></p>&mdash; Matt Upson (@m_a_upson) <a href="https://twitter.com/m_a_upson/status/971739929771495424?ref_src=twsrc%5Etfw">March 8, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

Ashley's presentation was another reminder of why it is important to write useful commit messages. Having a clean and sensible history created from disciplined commits can become a tool in its own right when seeking to improve the quality of our code.

Finally, another presentation from Microsoft employees: [errick Stolee]() and [Johannes Schindelin]() (the latter of whom was responsible for implementing `git rebase -i`) demonstrated the difficulties in bringing git to windows, and the complications this entails. Now that windows development has been moved over to git, windows users will be pleased to see new emphasis on improving the performance of git on windows, being driven by improvements introduced to improve the way git can handle the impressively large windows codebase.

All in all, git merge 2018 was a great event, rounded off by 
