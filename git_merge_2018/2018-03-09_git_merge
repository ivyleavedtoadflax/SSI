# Some takeaways from git merge 2018

This March I was lucky enough to get a ticket for the annual git conference in Barcelona. With it being just 20 minutes from home, it was not something I could miss, especially after being offered a ticket by Raniere, who sadly could not make it.

First of all it is worth saying a congratulatiosn (and thank you) to all the organisers and sponsers of git merge from: github, gitlab, bitbucket, microsoft, and stickermule. It was a slick and well organised event that went without hitch, served excellent food, and took place in the impressive MACBA conference centre, and __16th__ century convent in the heart of Barcelona, just __5__ minutes walk from the city's political centre.

One of the interesting things about going to a conference about all things git, is that there is a huge range of people who attend. To many (perhaps most) software developer`s, git is an essential paty of their daily work: so the range of people who might attend is really very wide. Aside from software developers who use and are interested in git, there were two other distinct grooups of people I noted: those who are not yet git users (or have just become git users) and wanted to learn more about using git, perhaps at workshops; and those with very deep expertise in git, were perhaps core developers at github, gitlab, or bitbucket, or even the git kernel itself. It was a truly international event: I spoke to delegates from Spain, Belgium, Switzerland, Canada, USA, UK, Germany, South Africa

These were my highlights from the conference:

[Brett Smith]() from the [Software Freedom Conservancy]() opened proceedings with an amusing portrayal of what was (for him) the start of thinking about sharing code and the values that many git users hold dear: the 1990s DOS game [ZZT](https://en.wikipedia.org/wiki/ZZT).

[Diane Hosfelt]() from [Mozilla]() presented about the importance of putting security critical code in plain sight, and managing it with a sensible workflow. Diane, like myself a self confessed recovering civil servant, noted the change in culture that moving to Mozilla and working openly on security critical browser components was to her. Working in government (and indeed any security conscious large organisation) there is sometimes a reluctance to share work within the organisation, let alone without. This cultural barrier to openess is sometimes motivated by nothing more than fear that others might criticise our code, but as Diane pointed out when she asked: 'How many of you have tried to read the source code of OpenSSL' (not very many at all it seemed): just because your code is in the open, doesn't mean anyone is actually going to read it. Nonetheless publishing openly and managing code with the familiar Issue>Fork>Pull Request>Review>Rebase>Test>Merge workflow is doubly important when it really matters for security critical code.

[Carlos Martin Nieto]() from [GitHub]() gave an interesting breakdown of the tech behind GitHub backups. tldr; your data is safe with GitHub, and moving from a system of storing data in volumes (on [AWS EC2]()) to storing data as objects (on [AWS S3]()) led to 90% savings in the backup costs. Key takeaways for me: if you need to rely on a piece of software, make sure you are using it every day; GitHub makes thousands of backup and restores every day on bespoke software.

[Edward Thomson]() from [Microsoft]() and the maintainer of [libgit2]() ,the library which sits behind git integration in many git clients, gave a slick demonstration of a security vulnerability which caused him many sleepless nights, exploiting case insensitivity on mac and windows systems
